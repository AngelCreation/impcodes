import android.content.Context;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;



/**
 * Created by admin on 1/25/17.
 */

public class SingleShotLocationProvider {

    public static interface LocationCallback {
        public void onNewLocationAvailable(GPSCoordinates location);
    }

    // calls back to calling thread, note this is for low grain: if you want higher precision, swap the
    // contents of the else and if. Also be sure to check gps permission/settings are allowed.
    // call usually takes <10ms
    public static void requestSingleUpdate(final Context context, final LocationCallback callback) {
        final LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
        boolean isNetworkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
        if (isNetworkEnabled) {
            Criteria criteria = new Criteria();
            criteria.setAccuracy(Criteria.ACCURACY_COARSE);
            locationManager.requestSingleUpdate(criteria, new LocationListener() {
                @Override
                public void onLocationChanged(Location location) {
                    callback.onNewLocationAvailable(new GPSCoordinates(location.getLatitude(), location.getLongitude()));
                }

                @Override public void onStatusChanged(String provider, int status, Bundle extras) { }
                @Override public void onProviderEnabled(String provider) { }
                @Override public void onProviderDisabled(String provider) { }
            }, null);
        } else {
            boolean isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
            if (isGPSEnabled) {
                Criteria criteria = new Criteria();
                criteria.setAccuracy(Criteria.ACCURACY_FINE);
                locationManager.requestSingleUpdate(criteria, new LocationListener() {
                    @Override
                    public void onLocationChanged(Location location) {
                        callback.onNewLocationAvailable(new GPSCoordinates(location.getLatitude(), location.getLongitude()));
                    }

                    @Override public void onStatusChanged(String provider, int status, Bundle extras) { }
                    @Override public void onProviderEnabled(String provider) { }
                    @Override public void onProviderDisabled(String provider) { }
                }, null);
            }
        }
    }


    // consider returning Location instead of this dummy wrapper class
    public static class GPSCoordinates {
        public float longitude = -1;
        public float latitude = -1;

        public GPSCoordinates(float theLatitude, float theLongitude) {
            longitude = theLongitude;
            latitude = theLatitude;
        }

        public GPSCoordinates(double theLatitude, double theLongitude) {
            longitude = (float) theLongitude;
            latitude = (float) theLatitude;
        }
    }
}



//usage

SingleShotLocationProvider.requestSingleUpdate(getActivity(),
                            new SingleShotLocationProvider.LocationCallback() {
                                @Override
                                public void onNewLocationAvailable(SingleShotLocationProvider.GPSCoordinates location) {
                                    progress.dismiss();
                                    latitude = location.latitude;
                                    longitude = location.longitude;

                                    String s = getCompleteAddressString(latitude,longitude);
                                    if( s != ""){
                                        ((EditText) autocompleteFragment.getView().findViewById(R.id.editWorkLocation)).setText(s);
                                    }

                                    latSource[0] = latitude;
                                    longiSource[0] = longitude;

                                    sourceCoordinates = new LatLng(latitude,longitude);

                                    Geocoder geocoder = new Geocoder(getActivity(), Locale.getDefault());

                                    List<Address> addresses = null; // Only retrieve 1 address
                                    try {
                                        addresses = geocoder.getFromLocation(
                                                sourceCoordinates.latitude,
                                                sourceCoordinates.longitude,
                                                1);
                                    } catch (IOException e) {
                                        e.printStackTrace();
                                    }
                                    try{
                                        Address address1 = addresses.get(0);
                                        countrySource = address1.getCountryCode();
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }

                                    startCity[0] = getCityname(latitude,longitude);

                                    valid();

                                    if (startCity[1] != null) {
                                        plotRoute();
                                    }
                                }
                            });
 
 
